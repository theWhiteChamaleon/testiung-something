{"version":3,"file":"static/js/227.b1c2eaf1.chunk.js","mappings":"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","sources":["services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","components/Popup/Popup.jsx","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","services/api/PlantAssignment/saveTableDataService.js","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/sharing/getSharing\";\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // HERE IS THE iSSUE THAT THIS FUNCTION IS ALWAYS CALLED .\r\n  let email = \"\";\r\n  let securityContext1 = \"\";\r\n  initWidget((widget) => {\r\n    securityContext1 = widget.getValue(\"Credentials\");\r\n    email = widget.getValue(\"email\");\r\n  });\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n  console.log(\"Security Context in usePlantAssignment:\", securityContext1);\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken(securityContext1);\r\n      // Step 1: Call Initial Service\r\n      if (headers) {\r\n        console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 3: Pass Combined Data to Additional Service\r\n        if (allCollabSpaces) {\r\n          const allPlants = await getAllPlants(\r\n            allCollabSpaces,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n          if (allPlants) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            // to dispatch the plants\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use All Plants] There are no Plants\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n        }\r\n\r\n        // Step 4: Call Remaining Independent Services\r\n        let getProductChildren = {};\r\n        console.log(\"Type Before:\", type);\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = {\r\n            success: true,\r\n            data: [],\r\n          };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          ); // type we need here\r\n        }\r\n        console.log(\"Type After:\", type);\r\n        console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        }\r\n\r\n        // Step 5: Dispatch Results to Redux\r\n\r\n        // hERE WE CAN ADD TOAST\r\n        console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n        return;\r\n      } else {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async (securityContext1) => {\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  let urlObjWAF =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/\";\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/setPreferences\";\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/getEcosystem\";\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction ,setLoading} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (asignedPlant) => {\r\n  if (!asignedPlant) return [];\r\n  return asignedPlant.map((plant) => ({\r\n    Plant: plant?.title || \"N/A\",\r\n    Seq: plant?.Seq || \"1\",\r\n    Status: \"Current\" || \"N/A\",\r\n    \"MFG Change\": plant?.MFGChange || \"N/A\",\r\n    \"MFG Status\": plant?.MFGStatus || \"N/A\",\r\n    Change: plant?.Change || \"N/A\",\r\n    \"Change Status\": plant?.ChangeStatus || \"N/A\",\r\n    \"Oracle Template\": plant.OracleTemplate || \"N/A\",\r\n    \"ERP Status\": \"Active\" || \"N/A\",\r\n    \"ERP Export\": \"Yes\" || \"N/A\",\r\n    \"Lead Plant\": false,\r\n    MBom: plant.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n    \"Sort Value\": \"\",\r\n  }));\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName) => [\r\n  { accessorKey: \"Plant\", header: \"Plant\" },\r\n  { accessorKey: \"Seq\", header: \"Seq\" },\r\n  {\r\n    accessorKey: \"MBom\",\r\n    header: \"MBom\",\r\n    cell: ({ row, getValue, table }) => {\r\n      const handleDropdownChange = (e) => {\r\n        if (!CAName) return; // Prevent changes when disabled\r\n        const updatedValue = e.target.value;\r\n\r\n        // Update the table data state here\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n      };\r\n\r\n      return (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          disabled={!CAName} // Disable dropdown if CAName is false\r\n          className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n          style={{\r\n            ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n            width: \"70%\",\r\n            padding: \"5px\",\r\n            fontSize: \"14px\",\r\n            color: \"#333\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => {\r\n            if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n          }}\r\n          onMouseOut={(e) => {\r\n            if (CAName) e.target.style.border = \"none\";\r\n          }}\r\n        >\r\n          <option value=\"Make\">Make</option>\r\n          <option value=\"Buy\">Buy</option>\r\n        </select>\r\n      );\r\n    },\r\n  },\r\n  { accessorKey: \"Status\", header: \"Status\" },\r\n  { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  { accessorKey: \"Change\", header: \"Change\" },\r\n  { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n  { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n\r\n  { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n];\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useMemo, useEffect } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\nconst Popup = ({\r\n  data,\r\n  columns,\r\n  buttonText = \"Add Plants\",\r\n  addedItem,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  console.log(\"[Popup] Data Received: \", data);\r\n  const [uniqueTableData, setUniqueTableData] = useState(data);\r\n  const [show, setShow] = useState(false);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n\r\n  useEffect(() => {\r\n    setUniqueTableData(data);\r\n  }, [data]);\r\n\r\n  const handleClose = () => setShow(false);\r\n\r\n  const handleShow = () => {\r\n    if (CAName) {\r\n      setShow(true);\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n  };\r\n\r\n  const addPlant = () => {\r\n    // Some Logic\r\n    const selectedRows = table.getSelectedRowModel().rows;\r\n    const selectedItem = selectedRows.map(\r\n      (item) => item.original[\"Available Plant\"]\r\n    );\r\n    console.log(\"[selected Item]\", selectedItem);\r\n    // need to add a condition for the no of selected items\r\n    if (selectedItem.length === 0) {\r\n      // alert(\"Please select any of the Plant\");\r\n      showWarningToast(MSG_EMPTYADD_ERROR);\r\n    } else {\r\n      // console.log(\"dfhgfd\", selectedRows);\r\n      // const updatedTableData = uniqueTableData.filter(\r\n      //   (row) =>\r\n      //     !selectedRows.find(\r\n      //       (selectedRow) =>\r\n      //         selectedRow.original[\"Available Plant\"] === row[\"Available Plant\"]\r\n      //     )\r\n      // );\r\n      // console.log(updatedTableData);\r\n      // setUniqueTableData(updatedTableData);\r\n      // console.log(\"bjdbjd\", uniqueTableData);\r\n      setRowSelection({}); // Reset row selection after removal\r\n      addedItem(selectedItem);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  // Enhance columns with selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"select\",\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"form-check-input\"\r\n          checked={row.getIsSelected()}\r\n          onChange={row.getToggleSelectedHandler()}\r\n        />\r\n      ),\r\n    };\r\n\r\n    return [selectionColumn, ...columns];\r\n  }, [columns]);\r\n\r\n  const table = useReactTable({\r\n    data: uniqueTableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-outline-primary btn-lg m-2\"\r\n        onClick={handleShow}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n\r\n      {show && (\r\n        <>\r\n          <div className=\"modal d-block\" tabIndex=\"-1\">\r\n            <div\r\n              className=\"modal-dialog modal-dialog-centered\"\r\n              style={{ maxWidth: \"500px\" }}\r\n            >\r\n              <div className=\"modal-content  container\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"me-5 popup-title\">{columns[0].header}</h5>\r\n\r\n                  <div>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-primary me-3\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: true },\r\n                        })\r\n                      }\r\n                    >\r\n                      Select All\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-secondary\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: false },\r\n                        })\r\n                      }\r\n                    >\r\n                      Deselect All\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"modal-body p-0\">\r\n                  {table.getRowModel().rows.length > 0 ? (\r\n                    <div\r\n                      className=\"overflow-auto\"\r\n                      style={{ maxHeight: \"60vh\" }}\r\n                    >\r\n                      {table.getRowModel().rows.map((row) => (\r\n                        <div\r\n                          key={row.id}\r\n                          className=\"p-3 border-bottom d-flex align-items-center\"\r\n                          style={{\r\n                            backgroundColor: row.getIsSelected()\r\n                              ? \"#d5e8f2\"\r\n                              : \"inherit\",\r\n                          }}\r\n                        >\r\n                          <div className=\"me-3\">\r\n                            {flexRender(\r\n                              row.getVisibleCells()[0].column.columnDef.cell,\r\n                              row.getVisibleCells()[0].getContext()\r\n                            )}\r\n                          </div>\r\n                          <div>{row.original[columns[0].accessorKey]}</div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-muted p-3\">No data available</p>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className=\"modal-footer d-flex justify-content-end\"\r\n                  style={{ backgroundColor: \"#f1f1f1\" }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary me-2\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    onClick={addPlant}\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-backdrop fade show\"></div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [AddedItem, setAddedItem] = useState([]);\r\n  const [addedItemData, setAddedItemData] = useState([]);\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  // useEffect(() => {\r\n  //   onAddPlant(addedItemData);\r\n  //   console.log(\"Data Passed\");\r\n  //   // addedPlant(AddedItem);\r\n  // }, [addedItemData]);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    setAddedItem(data);\r\n    if (data.length > 0) {\r\n      const newItems = data.map((title) => ({\r\n        title: title, // Use the title as Plant (or replace with actual data)\r\n        Seq: \"1\",\r\n        Status: \"Current\",\r\n        \"MFG Change\": \"N/A\",\r\n        \"MFG Status\": \"N/A\",\r\n        Change: \"N/A\",\r\n        \"Change Status\": \"N/A\",\r\n        \"Oracle Template\": \"N/A\",\r\n        \"ERP Status\": \"Active\",\r\n        \"ERP Export\": \"Yes\",\r\n        \"Lead Plant\": \"false\",\r\n        MBom: \"Buy\",\r\n        \"Sort Value\": \"\",\r\n      }));\r\n      onAddPlant(newItems);\r\n      setAddedItemData(newItems);\r\n      addedPlant(data);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   // if (AddedItem.length > 0) {\r\n  //   //   const newItems = AddedItem.map((title) => ({\r\n  //   //     title: title, // Use the title as Plant (or replace with actual data)\r\n  //   //     Seq: \"1\",\r\n  //   //     Status: \"Current\",\r\n  //   //     MFG_Change: \"\",\r\n  //   //     MFG_Status: \"\",\r\n  //   //     Change: \"\",\r\n  //   //     Change_Status: \"\",\r\n  //   //     Oracle_Template: \"\",\r\n  //   //     \"ERP Status\": \"Active\",\r\n  //   //     \"ERP Export\": \"Yes\",\r\n  //   //     \"Lead Plant\": \"false\",\r\n  //   //     MBom: \"Buy\",\r\n  //   //     \"Sort Value\": \"\",\r\n  //   //   }));\r\n  //   //   onAddPlant(newItems);\r\n  //   //   setAddedItemData(newItems);\r\n  //   //   addedPlant(AddedItem);\r\n  //   // }\r\n  // }, [AddedItem]);\r\n\r\n  console.log(\"Added item data:\", addedItemData);\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <Popup\r\n        data={uniquedata}\r\n        buttonText=\"Add Plants\"\r\n        columns={uniqueColumn}\r\n        CAName={CAName}\r\n        addedItem={handleData}\r\n        state={state}\r\n      />\r\n      <button\r\n        className=\"btn btn-outline-success btn-lg m-2\"\r\n        onClick={handleSaveClick}\r\n      >\r\n        Save\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-danger btn-lg m-2\"\r\n        onClick={handleRemove}\r\n      >\r\n        Remove\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport { clearAllListeners } from \"@reduxjs/toolkit\";\r\nimport { faClipboardQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [addedDataFromToolbar, setAddedDataFromToolbar] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n\r\n    setScreenLoader(true);\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    console.log(\"Selected Table Rows:\", selectedTableRows);\r\n    console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n    if (selectedTableRows.length > 0) {\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n\r\n      // // Filter out selected rows from assignedPlant and update tableData\r\n      // const updatedAssignedPlant = assignedPlant.filter(\r\n      //   (row) => !selectedTitles.includes(row.title)\r\n      // );\r\n      // console.log(\"Updated Assigned Plant:\", updatedAssignedPlant);\r\n\r\n      // Extract filtered-out rows to add them back to uniqueData\r\n      // const removedPlants = assignedPlant.filter((row) =>\r\n      //   selectedTitles.includes(row.title)\r\n      // );\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n      // // setAssignedPlant(updatedAssignedPlant); // Updated tableData\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n    } else {\r\n      alert(\"Please select at least one row to remove.\");\r\n    }\r\n  };\r\n\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\");\r\n    setAddedDataFromToolbar(data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    setTableData((prev) => [\r\n      ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n      ...prev,\r\n    ]);\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  };\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n  useEffect(() => {\r\n    setUniqueData(uniquePlant);\r\n  }, [uniquePlant]);\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData.objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    setAssignedPlant(asignedPlant);\r\n  }, [asignedPlant]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(\r\n    () => getTableData(assignedPlant),\r\n    [assignedPlant]\r\n  );\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // useEffect(() => {\r\n  //   if (addedDataFromToolbar.length > 0) {\r\n  //     console.log(\"[Plant Assignment] Table data\", tableData);\r\n  //     console.log(\"Added Data from Toolbar\", addedDataFromToolbar);\r\n  //     setAssignedPlant((prev) => [...addedDataFromToolbar, ...prev]);\r\n  //     setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  //   }\r\n  // }, [addedDataFromToolbar]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(() => tableColumns(CAName), [CAName]);\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n  \r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      \r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n           {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  data={tableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["SearchCA","async","flowDownCA","headers","CADetails","CAAtt","console","log","_searchResponse$chang","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","type","onComplete","response","onFailure","error","urlObjWAF","concat","caID","changeAction","identifier","CAUrl","CAresponse","item","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","title","CAState","state","usePlantAssignment","showErrorToast","useToast","dispatch","useDispatch","email","securityContext1","initWidget","widget","getValue","handlePlantAssignment","collabSpace","objectId","setParentDetailsLoading","csrfURL","process","csrfToken","csrf","name","csrfValue","value","securityContextHeader","securityContextValue","fetchCsrfToken","userGroupCollab","_objectSpread","data","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","forEach","result","sharings","userGroups","group","access","uri","userGroupID","replace","length","grpUrl","grpresponse","filter","members","includes","map","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","id","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","all","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","warn","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","bd","responseMode","ids","status","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChanges","proposedChange","where","action","whats","what","fetchCADetails","setCAName","setProposedChanges","MSG_FETCH_CSRF_HEADERS_FAILED","usePlantDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","window","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","uniqueColumns","accessorKey","header","_ref","columns","buttonText","addedItem","CAName","showWarningToast","uniqueTableData","setUniqueTableData","show","setShow","rowSelection","setRowSelection","handleClose","enhancedColumns","useMemo","cell","_ref2","row","className","checked","getIsSelected","onChange","getToggleSelectedHandler","table","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_jsxs","_Fragment","children","onClick","handleShow","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","tabIndex","style","maxWidth","getToggleAllRowsSelectedHandler","target","getRowModel","rows","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","original","addPlant","selectedItem","getSelectedRowModel","MSG_EMPTYADD_ERROR","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","AddedItem","setAddedItem","addedItemData","setAddedItemData","Popup","newItems","Seq","Status","Change","MBom","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","DragAndDropComponent","performSearch","useInterComSearch","Image","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","PlantAssignment","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","uniqueData","setUniqueData","addedDataFromToolbar","setAddedDataFromToolbar","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","selectedTableRows","loadingParentDetails","plantObjectData","uniquePlant","asignedPlant","productChildren","updateTableData","updatedData","prevKey","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in","_droppedObjectData$in2","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find","finalObj","plantName","Plant","classid","classitem","MBOM","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","productId","AllClasses","productChilds","fetchOOTBData","arguments","undefined","axios","NotPropagableChilds","prodChild","change","ErrorObj","prodchilds","notPropagableChild","childId","childName","Finalmessage","message","every","childTitles","join","newClasses","errorItem","updateBody","propagateClasses","classifyUrl","classifybody","classifyResponse","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse","saveData","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","cursor","position","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","top","background","border","fontSize","color","FaRegCopy","size","index","formattedFinalMessage","autoClose","closeOnClick","finalobj","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","MFGChange","MFGStatus","ChangeStatus","OracleTemplate","getTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","e","_table$options$meta","updatedValue","r","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","tableColumns","handleHomeClick","setIsDropped","parentDetails","versions","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}